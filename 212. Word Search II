class Solution {
    public List<String> result;
    public List<String> findWords(char[][] board, String[] words) {
        result = new ArrayList<>();
        for(int i = 0; i < words.length; i++){
            searchWords(board, words[i]);
        }
        return result;
    }
    public void searchWords(char[][] board, String word){
        boolean [][] visited = new boolean[board.length][board[0].length];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                helper(i, j , 0, board, word, visited);
            }
        }
        System.out.println(java.util.Arrays.toString(result.toArray()));
    }
    public void helper(int i, int j, int index, char[][] board, String word, boolean[][] visited){
        if(index >= word.length()){
            if((result.isEmpty()) || (!result.get(result.size()-1).equals(word)))
            result.add(word);
            return;
        }
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length ||visited[i][j] == true|| board[i][j] != word.charAt(index)){
            return;
        }
        visited[i][j] = true;
        helper(i+1, j , index+1, board, word, visited);
        helper(i-1, j , index+1, board, word, visited);
        helper(i, j+1 , index+1, board, word, visited);
        helper(i, j-1 , index+1, board, word, visited);
        visited[i][j] = false;
        
    }
}
