class Solution {
    public boolean exist(char[][] board, String word) {
        boolean [][] visited = new boolean [board.length][board[0].length];
        char [] words = word.toCharArray();
        boolean res = false;
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == words[0]){
                     res = dfs(board, words, i, j, 0, visited);
                    if(res){
                        return res;
                    }
                }
            }
        }
        return res;
    }
    public boolean dfs(char[][] board, char [] words, int i, int j, int index, boolean [][] visited){
        if(index >= words.length){
            return true;
        }
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != words[index] || visited[i][j]){
           
            return false;
        }
        visited[i][j] = true;
        boolean result = dfs(board, words, i+1, j,index+1, visited)|| dfs(board, words, i-1, j,index+1, visited) || dfs(board, words, i, j+1,index+1, visited)|| dfs(board, words, i, j-1,index+1, visited);
        visited[i][j] = false;
       return result; 
        
    }
}
