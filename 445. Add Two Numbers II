/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode newl1 = reverse(l1);
        ListNode newl2 = reverse(l2);
        ListNode newnode = new ListNode(0);
        ListNode head = newnode;
        int carry = 0;
        while(newl1 != null && newl2 != null){
            int sum = newl1.val + newl2.val + carry;
            ListNode tempNode = new ListNode(sum%10);
            head.next = tempNode;
            head = tempNode;
            carry = sum/10;
            newl1 = newl1.next;
            newl2 = newl2.next;
            
        }
        while(newl1 != null){
            int sum = newl1.val+carry;
            ListNode tempNode = new ListNode(sum%10);
            head.next = tempNode;
            head = tempNode;
            carry = sum/10;
            newl1 = newl1.next;
        
        }
        while(newl2 != null){
            int sum = newl2.val+carry;
            ListNode tempNode = new ListNode(sum%10);
            head.next = tempNode;
            head = tempNode;
            carry = sum/10;
            newl2 = newl2.next;
        
        }
        while(carry > 0){
            ListNode tempNode = new ListNode(carry%10);
            head.next = tempNode;
            head = tempNode;
            carry = carry/10;
        }
        return reverse(newnode.next);
    }
    public ListNode reverse(ListNode node){
        if(node == null || node.next== null){
            return node;
        }
        ListNode curr = node;
        ListNode prev = null;
        while(curr != null){
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;               
        }
        return prev;
    }
}
