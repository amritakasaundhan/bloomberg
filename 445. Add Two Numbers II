Approach1:
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null && l2 == null){
            return null;
        }
        if(l1 == null){
            return l2;
        }
        if(l2 == null){
            return l1;
        }
        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();
        while(l1 != null && l2 != null){
            stack1.push(l1.val);
            stack2.push(l2.val);
            l1 = l1.next;
            l2 = l2.next;
        }
        while(l1 != null){
            stack1.push(l1.val);
            l1 = l1.next;
        }
        while(l2 != null){
            stack2.push(l2.val);
            l2 = l2.next;
        }
        int carry = 0;
        Stack<Integer> stack = new Stack<>();
        while(!stack1.isEmpty() && !stack2.isEmpty()){
            int sum1 = stack1.pop();
            int sum2 = stack2.pop();;
            int sum =  sum1+ sum2 + carry;
            stack.push(sum%10);
            carry = sum/10;
        }
        while(!stack1.isEmpty()){
            int sum = stack1.pop()+ carry;
            stack.push(sum%10);
            carry = sum/10;
        }
        while(!stack2.isEmpty()){
            int sum = stack2.pop()+ carry;
            stack.push(sum%10);
            carry = sum/10;
        }
        while(carry > 0){
            stack.push(carry%10);
            carry = carry/10;
        }
        ListNode head = new ListNode(stack.pop());
        ListNode curr = head;
        while(!stack.isEmpty()){
            ListNode currTemp = new ListNode(stack.pop());
            curr.next = currTemp;
            curr = currTemp;
        }
        return head;
        
    }

}
Approach2:
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode newl1 = reverse(l1);
        ListNode newl2 = reverse(l2);
        ListNode newnode = new ListNode(0);
        ListNode head = newnode;
        int carry = 0;
        while(newl1 != null && newl2 != null){
            int sum = newl1.val + newl2.val + carry;
            ListNode tempNode = new ListNode(sum%10);
            head.next = tempNode;
            head = tempNode;
            carry = sum/10;
            newl1 = newl1.next;
            newl2 = newl2.next;
            
        }
        while(newl1 != null){
            int sum = newl1.val+carry;
            ListNode tempNode = new ListNode(sum%10);
            head.next = tempNode;
            head = tempNode;
            carry = sum/10;
            newl1 = newl1.next;
        
        }
        while(newl2 != null){
            int sum = newl2.val+carry;
            ListNode tempNode = new ListNode(sum%10);
            head.next = tempNode;
            head = tempNode;
            carry = sum/10;
            newl2 = newl2.next;
        
        }
        while(carry > 0){
            ListNode tempNode = new ListNode(carry%10);
            head.next = tempNode;
            head = tempNode;
            carry = carry/10;
        }
        return reverse(newnode.next);
    }
    public ListNode reverse(ListNode node){
        if(node == null || node.next== null){
            return node;
        }
        ListNode curr = node;
        ListNode prev = null;
        while(curr != null){
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;               
        }
        return prev;
    }
}
