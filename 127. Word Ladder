class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        //create a map to store all the possible combinations of strings
        Map<String, List<String>>map = new HashMap<>();
        //store all the possible combinations of word List in map
        for(int i = 0; i < wordList.size(); i++){ 
           for(int j = 0; j < wordList.get(i).length(); j++){
               char[] strArray = wordList.get(i).toCharArray();
               strArray[j] = '*';
              // System.out.println(String.valueOf(strArray));
               if(!map.containsKey(String.valueOf(strArray))){
                   map.put(String.valueOf(strArray), new ArrayList<>());
               }
               map.get(String.valueOf(strArray)).add(wordList.get(i));
           } 
        }
        /*apply bfs store 
        */
        // for (Map.Entry<String, List<String>> entry : map.entrySet()) {
        //     System.out.println(entry.getKey()+" -> "+java.util.Arrays.toString(entry.getValue().toArray()));
        // }
        Queue<String> q = new LinkedList<>();
        Queue<Integer> level = new LinkedList<>();
        Set<String> set = new HashSet<>();
        for(int i=0; i <beginWord.length();i++){
            char[] beginWord_Array= beginWord.toCharArray();
            beginWord_Array[i] = '*';
            
           if(map.containsKey(String.valueOf(beginWord_Array))){
               List<String> possibleList = map.get(String.valueOf(beginWord_Array));
               for(int j = 0; j < possibleList.size(); j++){
                   // List<String> list = map.get(beginWord_Array.toString());
                   if(!set.contains(possibleList.get(j))){
                        q.add(possibleList.get(j));
                        set.add(possibleList.get(j));
                        level.add(2);
                   }
                   
               }
                    
           } 
        }
        while(!q.isEmpty()){
           String str = q.poll();
            int l = level.poll();
                if(str.equals(endWord)){
                    return l;
                }
                for(int j = 0; j < str.length(); j++){
                    char [] strArray = str.toCharArray();
                    strArray[j] = '*';
                   if(map.containsKey(String.valueOf(strArray))){
                        List<String> finalList = map.get(String.valueOf(strArray));
                        for(int k = 0; k < finalList.size(); k++){
                            if(!set.contains(finalList.get(k))){
                                q.add(finalList.get(k));
                                set.add(finalList.get(k));
                                level.add(l+1);
                            }
                        }
                    }
                }
            
        }
        return 0;
    }
}
